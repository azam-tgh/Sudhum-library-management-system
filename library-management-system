<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sudhum Library Management System</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

    <!-- Custom Styles -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f1f5f9; /* slate-100 */
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f5f9;
        }
        ::-webkit-scrollbar-thumb {
            background: #64748b; /* slate-500 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #475569; /* slate-600 */
        }
        /* Simple animation for dashboard cards */
        .dashboard-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
        /* Modal styles */
        .modal {
            transition: opacity 0.3s ease;
        }
        /* Loading spinner */
        .loader {
            border-top-color: #4f46e5; /* indigo-600 */
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="text-slate-800">

    <!-- Main Container -->
    <div id="app" class="min-h-screen p-4 sm:p-6 lg:p-8">
        <div class="max-w-7xl mx-auto">

            <!-- Header -->
            <header class="mb-8">
                <div class="flex flex-col sm:flex-row justify-between items-center bg-white p-4 rounded-xl shadow-md">
                    <div class="flex items-center space-x-3">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-indigo-600" viewBox="0 0 20 20" fill="currentColor">
                          <path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 005.5 16c1.255 0 2.443-.29 3.5-.804V4.804zM14.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 0014.5 16c1.255 0 2.443-.29 3.5-.804v-10A7.968 7.968 0 0014.5 4z" />
                        </svg>
                        <h1 class="text-2xl sm:text-3xl font-bold text-slate-800">Sudhum Library</h1>
                    </div>
                    <div id="auth-container" class="text-center sm:text-right mt-3 sm:mt-0">
                        <p class="text-xs text-slate-500">Your User ID (Share for collaboration):</p>
                        <p id="userIdDisplay" class="font-mono text-sm bg-slate-200 px-2 py-1 rounded-md">Initializing...</p>
                    </div>
                </div>
            </header>

            <!-- Loading Indicator -->
            <div id="loading-indicator" class="flex justify-center items-center h-64">
                <div class="loader ease-linear rounded-full border-8 border-t-8 border-slate-200 h-32 w-32"></div>
            </div>

            <!-- Main Content (hidden until loaded) -->
            <main id="main-content" class="hidden">
                <!-- Dashboard Section -->
                <section id="dashboard" class="mb-8">
                    <h2 class="text-xl font-semibold mb-4 text-slate-700">Library Dashboard</h2>
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                        <!-- Total Books Card -->
                        <div class="dashboard-card bg-white p-6 rounded-xl shadow-md flex items-center space-x-4">
                            <div class="bg-blue-100 p-3 rounded-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6.253v11.494M12 6.253c-1.332 0-2.591.39-3.686 1.083-1.244.78-2.31 1.933-2.31 3.167s1.066 2.387 2.31 3.167C9.409 18.32 10.668 18.71 12 18.71c1.332 0 2.591-.39 3.686-1.083 1.244-.78 2.31-1.933 2.31-3.167s-1.066-2.387-2.31-3.167C14.591 6.643 13.332 6.253 12 6.253z" /></svg>
                            </div>
                            <div>
                                <p class="text-slate-500 text-sm">Total Books</p>
                                <p id="total-books" class="text-3xl font-bold">0</p>
                            </div>
                        </div>
                        <!-- Books Available Card -->
                        <div class="dashboard-card bg-white p-6 rounded-xl shadow-md flex items-center space-x-4">
                            <div class="bg-green-100 p-3 rounded-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                            </div>
                            <div>
                                <p class="text-slate-500 text-sm">Books Available</p>
                                <p id="available-books" class="text-3xl font-bold">0</p>
                            </div>
                        </div>
                        <!-- Books Issued Card -->
                        <div class="dashboard-card bg-white p-6 rounded-xl shadow-md flex items-center space-x-4">
                            <div class="bg-yellow-100 p-3 rounded-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-yellow-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" /></svg>
                            </div>
                            <div>
                                <p class="text-slate-500 text-sm">Books Issued</p>
                                <p id="issued-books" class="text-3xl font-bold">0</p>
                            </div>
                        </div>
                         <!-- Unique Authors Card -->
                        <div class="dashboard-card bg-white p-6 rounded-xl shadow-md flex items-center space-x-4">
                            <div class="bg-purple-100 p-3 rounded-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" /></svg>
                            </div>
                            <div>
                                <p class="text-slate-500 text-sm">Unique Authors</p>
                                <p id="unique-authors" class="text-3xl font-bold">0</p>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Library Management Section -->
                <section id="library-management" class="bg-white p-6 rounded-xl shadow-md">
                    <div class="flex flex-col sm:flex-row justify-between items-center mb-6 border-b border-slate-200 pb-4">
                        <h2 class="text-xl font-semibold text-slate-700 mb-4 sm:mb-0">Book Inventory</h2>
                        <div class="flex items-center space-x-4 w-full sm:w-auto">
                            <input type="text" id="search-input" placeholder="Search by title or author..." class="w-full sm:w-64 px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition">
                            <button id="add-book-btn" class="w-auto bg-indigo-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors shadow-sm flex items-center space-x-2">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>
                                <span>Add Book</span>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Books Table -->
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-slate-200">
                            <thead class="bg-slate-50">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Title</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Author</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Copies</th>
                                    <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="books-table-body" class="bg-white divide-y divide-slate-200">
                                <!-- Book rows will be inserted here by JavaScript -->
                                <tr><td colspan="5" class="text-center p-8 text-slate-500">No books in the library. Add one to get started!</td></tr>
                            </tbody>
                        </table>
                    </div>
                </section>
            </main>
        </div>
    </div>

    <!-- Add/Edit Book Modal -->
    <div id="book-modal" class="modal fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center p-4 hidden opacity-0">
        <div class="bg-white rounded-xl shadow-2xl p-8 w-full max-w-md transform transition-all scale-95">
            <div class="flex justify-between items-center mb-6">
                <h3 id="modal-title" class="text-2xl font-bold text-slate-800">Add New Book</h3>
                <button id="close-modal-btn" class="text-slate-400 hover:text-slate-600">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                </button>
            </div>
            <form id="book-form">
                <input type="hidden" id="book-id">
                <div class="space-y-4">
                    <div>
                        <label for="title" class="block text-sm font-medium text-slate-700">Title</label>
                        <input type="text" id="title" name="title" required class="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    </div>
                    <div>
                        <label for="author" class="block text-sm font-medium text-slate-700">Author</label>
                        <input type="text" id="author" name="author" required class="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    </div>
                    <div>
                        <label for="quantity" class="block text-sm font-medium text-slate-700">Total Copies</label>
                        <input type="number" id="quantity" name="quantity" min="1" required class="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    </div>
                </div>
                <div class="mt-8 flex justify-end space-x-4">
                    <button type="button" id="cancel-btn" class="px-4 py-2 bg-slate-200 text-slate-800 rounded-lg hover:bg-slate-300 transition">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition shadow-sm">Save Book</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Custom Alert/Message Box -->
    <div id="message-box" class="fixed top-5 right-5 bg-white shadow-lg rounded-lg p-4 max-w-sm hidden opacity-0 transition-opacity duration-300">
        <p id="message-text"></p>
    </div>


    <!-- Firebase SDK -->
    <script type="module">
        // --- Firebase v11.6.1 SDKs ---
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, collection, onSnapshot, addDoc, setDoc, updateDoc, deleteDoc, runTransaction, query, where, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- App Configuration ---
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-sudhum-library';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');

        // --- DOM Elements ---
        const loadingIndicator = document.getElementById('loading-indicator');
        const mainContent = document.getElementById('main-content');
        const userIdDisplay = document.getElementById('userIdDisplay');
        const totalBooksEl = document.getElementById('total-books');
        const availableBooksEl = document.getElementById('available-books');
        const issuedBooksEl = document.getElementById('issued-books');
        const uniqueAuthorsEl = document.getElementById('unique-authors');
        const booksTableBody = document.getElementById('books-table-body');
        const searchInput = document.getElementById('search-input');
        
        // Modal elements
        const bookModal = document.getElementById('book-modal');
        const modalTitle = document.getElementById('modal-title');
        const bookForm = document.getElementById('book-form');
        const bookIdInput = document.getElementById('book-id');
        const addBookBtn = document.getElementById('add-book-btn');
        const closeModalBtn = document.getElementById('close-modal-btn');
        const cancelBtn = document.getElementById('cancel-btn');

        // --- Firebase Initialization ---
        let app, auth, db, userId;
        let allBooks = []; // Local cache for searching
        let issuedRecords = []; // Local cache for issued books

        async function initializeFirebase() {
            try {
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdDisplay.textContent = userId;
                        await setupListeners();
                        showMainContent();
                    } else {
                        // Handle sign-in
                        if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                            await signInWithCustomToken(auth, __initial_auth_token);
                        } else {
                            await signInAnonymously(auth);
                        }
                    }
                });
            } catch (error) {
                console.error("Firebase Initialization Error:", error);
                showMessage("Error initializing the application.", "error");
                loadingIndicator.innerHTML = '<p class="text-red-500">Failed to load library. Please refresh.</p>';
            }
        }

        // --- UI Functions ---
        function showMainContent() {
            loadingIndicator.classList.add('hidden');
            mainContent.classList.remove('hidden');
        }

        function showMessage(message, type = 'success') {
            const messageBox = document.getElementById('message-box');
            const messageText = document.getElementById('message-text');
            
            messageText.textContent = message;
            messageBox.classList.remove('hidden', 'opacity-0', 'bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800');
            
            if (type === 'success') {
                messageBox.classList.add('bg-green-100', 'text-green-800');
            } else {
                messageBox.classList.add('bg-red-100', 'text-red-800');
            }
            
            messageBox.classList.remove('hidden');
            setTimeout(() => messageBox.classList.remove('opacity-0'), 10);
            
            setTimeout(() => {
                messageBox.classList.add('opacity-0');
                setTimeout(() => messageBox.classList.add('hidden'), 300);
            }, 3000);
        }

        function openModal() {
            bookForm.reset();
            bookIdInput.value = '';
            modalTitle.textContent = 'Add New Book';
            bookModal.classList.remove('hidden');
            setTimeout(() => {
                bookModal.classList.remove('opacity-0');
                bookModal.querySelector('div').classList.remove('scale-95');
            }, 10);
        }

        function closeModal() {
            bookModal.classList.add('opacity-0');
            bookModal.querySelector('div').classList.add('scale-95');
            setTimeout(() => bookModal.classList.add('hidden'), 300);
        }

        // --- Firestore Listeners ---
        async function setupListeners() {
            if (!db || !userId) return;

            // Listener for books collection
            const booksCollectionPath = `/artifacts/${appId}/public/data/books`;
            const booksQuery = collection(db, booksCollectionPath);
            onSnapshot(booksQuery, (snapshot) => {
                allBooks = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                // After getting books, get the issued records to have the full picture
                fetchIssuedRecordsAndUpdateUI();
            }, (error) => {
                console.error("Error fetching books:", error);
                showMessage("Could not fetch book data.", "error");
            });
        }

        async function fetchIssuedRecordsAndUpdateUI() {
             if (!db || !userId) return;
            // Listener for issued records
            const issuedCollectionPath = `/artifacts/${appId}/public/data/issued_records`;
            const issuedQuery = collection(db, issuedCollectionPath);
            onSnapshot(issuedQuery, (snapshot) => {
                issuedRecords = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                updateDashboard();
                renderBooks();
            }, (error) => {
                console.error("Error fetching issued records:", error);
                showMessage("Could not fetch issued records.", "error");
            });
        }

        // --- Data Rendering ---
        function updateDashboard() {
            const total = allBooks.reduce((sum, book) => sum + book.total_quantity, 0);
            const issued = issuedRecords.length;
            const available = total - issued;
            const authors = new Set(allBooks.map(book => book.author.trim().toLowerCase()));

            totalBooksEl.textContent = total;
            availableBooksEl.textContent = available;
            issuedBooksEl.textContent = issued;
            uniqueAuthorsEl.textContent = authors.size;
        }

        function renderBooks(booksToRender = allBooks) {
            booksTableBody.innerHTML = ''; // Clear existing table
            if (booksToRender.length === 0) {
                booksTableBody.innerHTML = '<tr><td colspan="5" class="text-center p-8 text-slate-500">No books match your search or exist in the library.</td></tr>';
                return;
            }

            booksToRender.forEach(book => {
                const issued_count = issuedRecords.filter(r => r.bookId === book.id).length;
                const available_count = book.total_quantity - issued_count;
                const isAvailable = available_count > 0;
                const currentUserHasIssued = issuedRecords.some(r => r.bookId === book.id && r.userId === userId);

                const statusClass = isAvailable ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
                const statusText = isAvailable ? 'Available' : 'Out of Stock';

                const tr = document.createElement('tr');
                tr.className = "hover:bg-slate-50 transition-colors";
                tr.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-slate-900">${book.title}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-slate-600">${book.author}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
                            ${statusText}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-slate-600">
                        ${available_count} / ${book.total_quantity}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium space-x-2">
                        ${
                            currentUserHasIssued
                            ? `<button data-action="return" data-book-id="${book.id}" class="text-white bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded-md transition">Return</button>`
                            : isAvailable
                            ? `<button data-action="issue" data-book-id="${book.id}" class="text-white bg-green-600 hover:bg-green-700 px-3 py-1 rounded-md transition">Issue</button>`
                            : `<button class="text-slate-400 bg-slate-200 px-3 py-1 rounded-md cursor-not-allowed">Issue</button>`
                        }
                        <button data-action="delete" data-book-id="${book.id}" class="text-red-600 hover:text-red-900 transition">Delete</button>
                    </td>
                `;
                booksTableBody.appendChild(tr);
            });
        }
        
        // --- Event Handlers ---
        bookForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const title = bookForm.title.value.trim();
            const author = bookForm.author.value.trim();
            const quantity = parseInt(bookForm.quantity.value, 10);
            
            if (!title || !author || isNaN(quantity) || quantity < 1) {
                showMessage("Please fill all fields correctly.", "error");
                return;
            }

            const bookData = {
                title,
                author,
                total_quantity: quantity,
            };

            try {
                const booksCollectionPath = `/artifacts/${appId}/public/data/books`;
                await addDoc(collection(db, booksCollectionPath), bookData);
                showMessage(`Book "${title}" added successfully!`, "success");
                closeModal();
            } catch (error) {
                console.error("Error adding book:", error);
                showMessage("Failed to add book.", "error");
            }
        });

        booksTableBody.addEventListener('click', async (e) => {
            const target = e.target.closest('button');
            if (!target) return;

            const action = target.dataset.action;
            const bookId = target.dataset.bookId;

            if (action === 'delete') {
                if (confirm('Are you sure you want to delete this book and all its records? This cannot be undone.')) {
                    await deleteBook(bookId);
                }
            } else if (action === 'issue') {
                await issueBook(bookId);
            } else if (action === 'return') {
                await returnBook(bookId);
            }
        });

        searchInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filteredBooks = allBooks.filter(book => 
                book.title.toLowerCase().includes(searchTerm) ||
                book.author.toLowerCase().includes(searchTerm)
            );
            renderBooks(filteredBooks);
        });

        // --- Firestore Actions ---
        async function deleteBook(bookId) {
            try {
                const bookDocRef = doc(db, `/artifacts/${appId}/public/data/books`, bookId);
                // Also delete any associated issue records
                const issuedQuery = query(collection(db, `/artifacts/${appId}/public/data/issued_records`), where("bookId", "==", bookId));
                const issuedSnapshot = await getDocs(issuedQuery);
                
                await runTransaction(db, async (transaction) => {
                    transaction.delete(bookDocRef);
                    issuedSnapshot.forEach(doc => transaction.delete(doc.ref));
                });
                
                showMessage("Book deleted successfully.", "success");
            } catch (error) {
                console.error("Error deleting book:", error);
                showMessage("Failed to delete book.", "error");
            }
        }
        
        async function issueBook(bookId) {
            const book = allBooks.find(b => b.id === bookId);
            if (!book) return;

            const issueData = {
                bookId: book.id,
                bookTitle: book.title,
                userId: userId,
                issueDate: new Date().toISOString()
            };

            try {
                const issuedCollectionPath = `/artifacts/${appId}/public/data/issued_records`;
                await addDoc(collection(db, issuedCollectionPath), issueData);
                showMessage(`You have issued "${book.title}".`, "success");
            } catch (error) {
                console.error("Error issuing book:", error);
                showMessage("Failed to issue book.", "error");
            }
        }

        async function returnBook(bookId) {
            const recordToReturn = issuedRecords.find(r => r.bookId === bookId && r.userId === userId);
            if (!recordToReturn) {
                showMessage("Could not find the issue record for this book.", "error");
                return;
            }
            
            try {
                const recordDocRef = doc(db, `/artifacts/${appId}/public/data/issued_records`, recordToReturn.id);
                await deleteDoc(recordDocRef);
                showMessage(`You have returned "${recordToReturn.bookTitle}".`, "success");
            } catch (error) {
                console.error("Error returning book:", error);
                showMessage("Failed to return book.", "error");
            }
        }

        // --- Modal Event Listeners ---
        addBookBtn.addEventListener('click', openModal);
        closeModalBtn.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);
        window.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && !bookModal.classList.contains('hidden')) {
                closeModal();
            }
        });

        // --- Start the App ---
        initializeFirebase();

    </script>
</body>
</html>
